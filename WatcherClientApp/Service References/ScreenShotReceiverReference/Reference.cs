//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WatcherClient.ScreenShotReceiverReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageUpload", Namespace="http://schemas.datacontract.org/2004/07/ScreenShotReceiver")]
    [System.SerializableAttribute()]
    public partial class ImageUpload : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaptureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PCGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaptureTime {
            get {
                return this.CaptureTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptureTimeField, value) != true)) {
                    this.CaptureTimeField = value;
                    this.RaisePropertyChanged("CaptureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageData {
            get {
                return this.ImageDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageDataField, value) != true)) {
                    this.ImageDataField = value;
                    this.RaisePropertyChanged("ImageData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PCGuid {
            get {
                return this.PCGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.PCGuidField, value) != true)) {
                    this.PCGuidField = value;
                    this.RaisePropertyChanged("PCGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScreenShotReceiverReference.IScreenShotReceiver")]
    public interface IScreenShotReceiver {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScreenShotReceiver/Upload", ReplyAction="http://tempuri.org/IScreenShotReceiver/UploadResponse")]
        void Upload(WatcherClient.ScreenShotReceiverReference.ImageUpload composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScreenShotReceiverChannel : WatcherClient.ScreenShotReceiverReference.IScreenShotReceiver, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScreenShotReceiverClient : System.ServiceModel.ClientBase<WatcherClient.ScreenShotReceiverReference.IScreenShotReceiver>, WatcherClient.ScreenShotReceiverReference.IScreenShotReceiver {
        
        public ScreenShotReceiverClient() {
        }
        
        public ScreenShotReceiverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScreenShotReceiverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenShotReceiverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScreenShotReceiverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Upload(WatcherClient.ScreenShotReceiverReference.ImageUpload composite) {
            base.Channel.Upload(composite);
        }
    }
}
